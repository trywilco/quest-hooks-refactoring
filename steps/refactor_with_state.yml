id: refactor_with_state
learningObjectives:
- Refactoring a complex class component into a functional component with React Hooks, Props
hints: 
  - Just remember that you can use `useState` to [keep the component state updated](https://reactjs.org/docs/hooks-state.html).
startFlow:
  do:
  - actionId: bot_message
    params:
      person: head-of-rd
      messages:
      - text: Looking good! Now we can refactor an entire component along with its state.
        delay: 2200
      - text:  Please :instruction[**modify `CommentInput.js` to use Hooks**] and then **open another PR**.
        delay: 1800
githubActions:
  frontend:
    testFile: commentInputFunctionalComponent.test.js
    cmd: 
    - yarn test --ci --watchAll=false --silent
trigger:
  type: github_pr_lifecycle_status
  flowNode:
    switch:
      key: "${eventType}"
      cases:
        github_pr_opened:
          do:
          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: Thanks, I'll review the changes right away.
                delay: 2000
          - actionId: github_pr_comment
            params:
              person: head-of-rd
              message: Thanks, I'll review the changes right away.
        github_pr_workflow_complete_success:
          do:
          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: Excellent job ${user.firstName}! Go ahead and merge the PR.
                delay: 2500
          - actionId: github_pr_approve
            params:
              person: head-of-rd
              message: Excellent job @${user.githubuser}! Go ahead and merge the PR.
        github_pr_workflow_complete_failure:
          do:
          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: I appreciate you trying, but I less appreciate you failing. Check your code, then try again.
                delay: 3500
          - actionId: github_pr_reject
            params:
              person: head-of-rd
              message: I appreciate you trying, but I less appreciate you failing. Can you check what went wrong?
        github_pr_merged:
          do:
          - actionId: finish_step

solution: 
  do:
    - actionId: bot_message
      params:
        messages: 
          - text: The easy part of this step is similar to the previous one - we need to change the class component into a function component, and convert the `render()` function into a return statement. 
          - text: Once you're done with it, you'll see some errors. This makes total sense, as class components have no constructor! We will need to adjust the state management, from being stored on class members (`this.state`, which is initialized in the constructor), to use hooks. 
          - text: Which hook are we going to use? As implied above, we need to store a component's state, and that's why we have the `useState` hook. 
          - text: This hook receives the default value, and returns a tuple - he current state value and a function that lets you update it (a setter). So let's go ahead and declare a state that will store the comment body, with a default of empty string. 
          - text: |
            ```
            const [body, setBody] = useState("")
            ```
          - text: \[as a side note, see that the best practice for naming the unpacked tuple is `value` and `setValue`\]
          - text: Now we can use the `body` variable instead of `this.state.body`, and pass the `setBody` setter directly to the `onChange` method - 
          - text: |
            ```
            onChange={(ev) => setBody(ev.target.value)}
            ```
          - text: You can complete the rest of the function adjustments, run a quick functional test of posting a comment on an item, and open a PR once everything works with hooks.