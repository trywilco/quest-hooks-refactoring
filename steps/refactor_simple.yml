id: refactor_simple
learningObjectives:
- Refactoring a simple class component into a functional component with React Hooks
hints: 
  -  Umm, you should probably try to follow the "[Introducing Hooks](https://reactjs.org/docs/hooks-intro.html)" guide and convert the class into a function.
startFlow:
  do:
  - actionId: bot_message
    params:
      person: head-of-rd
      messages:
      - text: Thanks! Also, Hi there, how are you, lovely weather outside, isn't it?   
        delay: 3500
      - text: Yes, great, wonderful, good. Anyway, there's an old React app we need to update, to make it easier to reuse stateful logic between components.
        delay: 4300
      - text: Thatâ€™s why we decided to use [Hooks](https://reactjs.org/docs/hooks-intro.html#motivation)
        delay: 4000
      - text: https://media.giphy.com/media/B4ZgcoPTHYXL2/giphy.gif 
        delay: 4200
      - text: Let's start with something small - [refactoring a single class component into a functional component](https://reactjs.org/docs/hooks-overview.html).
        delay: 3500
      - text: So please :instruction[**refactor the code in the `Header.js` component**] to make it a functional component and **open a PR** when youâ€™re done!
        delay: 2000
githubActions:
  frontend:
    testFile: headerIsFunctionalComponent.test.js
    cmd: 
    - yarn test --ci --watchAll=false --silent
trigger:
  type: github_pr_lifecycle_status
  flowNode:
    switch:
      key: "${eventType}"
      cases:
        github_pr_opened:
          do:
          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: Give me a minute to review your PR. 
                delay: 1700
          - actionId: github_pr_comment
            params:
              person: head-of-rd
              message: Saw your PR, reviewing it now. 
        github_pr_workflow_complete_success:
          do:
          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: Perfect, you can merge the PR now and weâ€™ll continue.
                delay: 2300
          - actionId: github_pr_approve
            params:
              person: head-of-rd
              message: Great work. Go ahead and merge the PR.
        github_pr_workflow_complete_failure:
          do:
          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: Hmmm, looks like thereâ€™s a problem here. Can you go over the code again?
                delay: 3500
          - actionId: github_pr_reject
            params:
              person: head-of-rd
              message: Seems like there might be a problem with your code. Can you take a second look?


        github_pr_merged:
          do:
          - actionId: finish_step

solution:
  do:
    - actionId: bot_message
      params:
        messages: 
          - text: No worries, let's see how we can refactor those class components.
          - text: Following the "Hooks at a Glance" documentation, we can see that the first thing we need to do here is change our class into a function.
          - text: That's fairly easy, all you need to do is change the declaration, and instead of having a render function, we need to return the JSX rendering of the component. This should roughly look like the following snippet -
          - text: |
            ```
            function Header(props) {
              return (
                <nav>
                  ...
                </nav>
              )
            }
            ```
          - text: However, if we save this and try to open up the browser, we'll see nothing is rendered. Digging into the developer tools console, we'll find the following error - 
          - text: |
            ```
            Uncaught TypeError: Cannot read properties of undefined (reading 'props')
            ```
          - text: When `Header` was a class component, it had it's members being passed on invocation, so we could have accessed them with `this.props`. However, once we changed it to a function, we need to explicitly accept those props.
          - text: We can do this either by declaring the entire props dictionary as a parameter - `function Header(props) {}`, or by unpacking it to the desired variables - `function Header({ currentUser }) {}` . 
          - text: Of course, this means we will need to change the usage of those parameters inside the function. 
          - text: I trust that you can take it from here! ðŸ™‚
